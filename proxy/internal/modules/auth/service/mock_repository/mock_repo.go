// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entities "proxy/internal/modules/auth/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepo is a mock_repository of DatabaseRepo interface.
type MockDatabaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepoMockRecorder
}

// MockDatabaseRepoMockRecorder is the mock_repository recorder for MockDatabaseRepo.
type MockDatabaseRepoMockRecorder struct {
	mock *MockDatabaseRepo
}

// NewMockDatabaseRepo creates a new mock_repository instance.
func NewMockDatabaseRepo(ctrl *gomock.Controller) *MockDatabaseRepo {
	mock := &MockDatabaseRepo{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepo) EXPECT() *MockDatabaseRepoMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockDatabaseRepo) GetUserByEmail(arg0 string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDatabaseRepoMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDatabaseRepo)(nil).GetUserByEmail), arg0)
}

// InsertUser mocks base method.
func (m *MockDatabaseRepo) InsertUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDatabaseRepoMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertUser), arg0)
}
